#include<Windows.h>
#pragma comment(lib,"winmm.lib")

HDC g_hdc = 0, g_hcdc = 0;
HBITMAP g_hbmpPlayer = (HBITMAP)LoadImage(0, L"圈.bmp", IMAGE_BITMAP, 180, 180, LR_LOADFROMFILE),
g_hbmpComputer = (HBITMAP)LoadImage(0, L"叉.bmp", IMAGE_BITMAP, 180, 180, LR_LOADFROMFILE),
g_hbmp = 0;
HPEN g_hPen = CreatePen(PS_SOLID, 4, RGB(0, 0, 0));
int board[9] = { 0 };
enum who { Player = 1, Computer };

LRESULT WINAPI WinProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);
bool GameInit(HWND);
void GamePaint();
bool GameCleanUp();
bool GetStep(HWND, int, int);
int GetPosition(LPPOINT);
bool GameVictory();
bool ComputerPlay(HWND);
bool PlayerPlay(HWND, int);
bool RestartGame(HWND);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
	WNDCLASSEX wndClass = { sizeof(WNDCLASSEX),CS_HREDRAW | CS_VREDRAW,WinProc,0,0,hInstance,
		(HICON)LoadImage(0,L"icon.ico",IMAGE_ICON,0,0,LR_LOADFROMFILE),LoadCursor(0,IDC_ARROW),
		(HBRUSH)GetStockObject(GRAY_BRUSH),0,L"CLASSNAME",0 };

	if (!RegisterClassEx(&wndClass))return false;
	
	HWND hwnd = CreateWindow(L"CLASSNAME", L"井字棋", WS_OVERLAPPEDWINDOW, 
		250, 50, 800, 800, 0, 0, hInstance, 0);

	MoveWindow(hwnd, 250, 50, 800, 800, true);
	ShowWindow(hwnd, nCmdShow);
	UpdateWindow(hwnd);

	PlaySound(L"Spirit.wav", 0, SND_FILENAME | SND_ASYNC | SND_LOOP);

	if (!GameInit(hwnd)) {
		MessageBox(0, L"初始化游戏失败", L"警告", MB_OK | MB_ICONERROR);
		return false;
	}

	MSG msg = { 0 };
	while (msg.message != WM_QUIT) {
		if (!PeekMessage(&msg, 0, 0, 0, PM_REMOVE)) {
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
	}

	if (!UnregisterClass(L"CLASSNAME", hInstance))return false;
	
	return true;
}

LRESULT WINAPI WinProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	PAINTSTRUCT paintStruct;
	int Position;
	POINT point;
	switch (message) {
	case WM_PAINT:
		g_hdc = BeginPaint(hwnd, &paintStruct);
		GamePaint();
		EndPaint(hwnd, &paintStruct);
		ValidateRect(hwnd, 0);
		break;
	case WM_LBUTTONDOWN:
		if (GameVictory())break;
		point.x = LOWORD(lParam);
		point.y = HIWORD(lParam);
		Position = GetPosition(&point);
		if (Position == 0 | board[Position - 1])break;
		else if (PlayerPlay(hwnd, Position))break;
		else ComputerPlay(hwnd);
		break;
	case WM_RBUTTONDOWN:
		RestartGame(hwnd);
		break;
	case WM_KEYDOWN:
		if (wParam == VK_ESCAPE)DestroyWindow(hwnd);
		else if (wParam == VK_RETURN)RestartGame(hwnd);
		break;
	case WM_DESTROY:
		GameCleanUp();
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hwnd, message, wParam, lParam);
	}
	return true;
}

bool GameInit(HWND hwnd)
{
	g_hdc = GetDC(hwnd);
	GamePaint();
	ReleaseDC(hwnd, g_hdc);
	return true;
}

void GamePaint()
{
	Rectangle(g_hdc, 70, 70, 730, 730);
	SelectObject(g_hdc, g_hPen);
	Rectangle(g_hdc, 100, 100, 700, 700);
	MoveToEx(g_hdc, 300, 100, 0);
	LineTo(g_hdc, 300, 700);
	MoveToEx(g_hdc, 500, 100, 0);
	LineTo(g_hdc, 500, 700);
	MoveToEx(g_hdc, 100, 300, 0);
	LineTo(g_hdc, 700, 300);
	MoveToEx(g_hdc, 100, 500, 0);
	LineTo(g_hdc, 700, 500);
}

bool GameCleanUp()
{
	DeleteObject(g_hPen);
	DeleteObject(g_hbmp);
	DeleteObject(g_hbmpPlayer);
	DeleteObject(g_hbmpComputer);
	return true;
}

int GetPosition(LPPOINT lpPoint)
{
	if (lpPoint->y > 100 && lpPoint->y < 300) {
		if (lpPoint->x > 100 && lpPoint->x < 300)return 1;
		else if (lpPoint->x > 300 && lpPoint->x < 500)return 2;
		else if (lpPoint->x > 500 && lpPoint->x < 700)return 3;
		else return 0;
	}
	else if (lpPoint->y > 300 && lpPoint->y < 500) {
		if (lpPoint->x > 100 && lpPoint->x < 300)return 4;
		else if (lpPoint->x > 300 && lpPoint->x < 500)return 5;
		else if (lpPoint->x > 500 && lpPoint->x < 700)return 6;
		else return 0;
	}
	else if (lpPoint->y > 500 && lpPoint->y < 700) {
		if (lpPoint->x > 100 && lpPoint->x < 300)return 7;
		else if (lpPoint->x > 300 && lpPoint->x < 500)return 8;
		else if (lpPoint->x > 500 && lpPoint->x < 700)return 9;
		else return 0;
	}
	else return 0;
}

bool GetStep(HWND hwnd, int position, int PlayerOrComputer)
{
	if (PlayerOrComputer == Player)g_hbmp = g_hbmpPlayer;
	else g_hbmp = g_hbmpComputer;
	g_hdc = GetDC(hwnd);
	g_hcdc = CreateCompatibleDC(g_hdc);
	SelectObject(g_hcdc, g_hbmp);
	int x, y;
	x = 200 * ((position - 1) % 3);
	y = 200 * ((position - 1) / 3);
	BitBlt(g_hdc, x + 110, y + 110, 180, 180, g_hcdc, 0, 0, SRCCOPY);
	DeleteDC(g_hcdc);
	ReleaseDC(hwnd, g_hdc);
	board[position - 1] = PlayerOrComputer;
	return true;
}

bool GameVictory()
{
	if (board[0] == board[1] && board[1] == board[2] && board[2] != 0)return true;
	else if (board[3] == board[4] && board[4] == board[5] && board[5] != 0)return true;
	else if (board[6] == board[7] && board[7] == board[8] && board[8] != 0)return true;
	else if (board[0] == board[3] && board[3] == board[6] && board[6] != 0)return true;
	else if (board[1] == board[4] && board[4] == board[7] && board[7] != 0)return true;
	else if (board[2] == board[5] && board[5] == board[8] && board[8] != 0)return true;
	else if (board[0] == board[4] && board[4] == board[8] && board[8] != 0)return true;
	else if (board[2] == board[4] && board[4] == board[6] && board[6] != 0)return true;
	else return false;
}

bool ComputerPlay(HWND hwnd)
{
	int position, emptyPosition[9], emptyAmount = 0, randNumber;
	for (int i = 0;i < 9;i++) {
		if (board[i] == 0)emptyPosition[emptyAmount++] = i + 1;
	}
	if (emptyAmount == 0)return false;
	srand(timeGetTime());
	randNumber = rand() % emptyAmount;
	position = emptyPosition[randNumber];
	GetStep(hwnd, position, Computer);
	if (GameVictory()) {
		MessageBox(0, L"You lose!\nWhat a pity!", L"Failed", MB_ICONINFORMATION | MB_OK);
		return true;
	}
	else return false;
}

bool PlayerPlay(HWND hwnd,int Position)
{
	GetStep(hwnd, Position, Player);
	if (GameVictory()) {
		MessageBox(0, L"You win!\n你的电脑已成功植入木马！", L"Victory", MB_ICONINFORMATION | MB_OK);
		return true;
	}
	else return false;
}

bool RestartGame(HWND hwnd)
{
	if (!GameInit(hwnd)) {
		MessageBox(0, L"初始化游戏失败", L"警告", MB_OK | MB_ICONERROR);
		return false;
	}
	for (int i = 0;i < 9;i++) {
		board[i] = 0;
	}
	return true;
}

int ComputerAI(int Position)
{
	if (board[4] == 0)return 5;
	int playerPosition[4], amount = 0;
	for (int i = 0;i < 4;i++) {
		if (board[i] == Player)playerPosition[amount++] = i + 1;
	}
	if (amount == 1) {
		srand(timeGetTime());
		int i = rand() % 4 + 1;
		return 2 * i;
	}
	else if (amount == 2 && board[4] == Computer) {
		switch (playerPosition[0]) {
		case 1:
			if (playerPosition[1] == 2)return 3;
			else if (playerPosition[1] == 3)return 2;
			else if (playerPosition[1] == 4)return 7;
			else if (playerPosition[1] == 7)return 4;
			else return /*随机函数*/;
		case 2:
			if (playerPosition[1] == 3)return 1;
			else return /*随机函数*/;
		case 3:
			if (playerPosition[1] == 6)return 9;
			else if (playerPosition[1] == 9)return 6;
			else return /*随机函数*/;
		case 4:
			if (playerPosition[1] == 7)return 1;
			else return /*随机函数*/;
		case 6:
			if (playerPosition[1] == 9)return 3;
			else return /*随机函数*/;
		case 7:
			if (playerPosition[1] == 8)return 9;
			else return 8;
		case 8:return 7;
		}
	}
	else if (amount == 2 && board[4] == Player) {
		switch (Position) {
		case 1:return 9;
		case 2:
			if (board[7] == 0)return 8;
			else return /*随机7或9*/;
		case 3:return 7;
		case 4:
			if (board[5] == 0)return 6;
			else return /*随机3或9*/;
		case 6:
			if (board[3] == 0)return 4;
			else return /*随机1或7*/;
		case 7:return 3;
		case 8:
			if (board[1] == 0)return 2;
			else return /*随机1或3*/;
		case 9:return 1;
		}

	}
	else if (amount == 3 && board[4] == Computer) {
		switch (playerPosition[0]) {
		case 1:
		case 2:
		case 3:
		case 4:
		case 6:
		}
	}
}
